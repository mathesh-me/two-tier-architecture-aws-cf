AWSTemplateFormatVersion: '2010-09-09'
Description: Sample AWS CloudFormation Template

Parameters:
  Region:
    Type: String
    Description: AWS Region
    Default: us-east-1
  VpcName:
    Type: String
    Description: Name for the VPC
    Default: MyVPC
  VpcCidr:
    Type: String
    Description: CIDR block for the VPC
    Default: 10.0.0.0/16
  IgName:
    Type: String
    Description: Name for Internet Gateway
    Default: MyIG
  PubSubnet1Cidr:
    Type: String
    Description: CIDR block for public Subnet-1
    Default: 10.0.0.0/24
  PubSubnet2Cidr:
    Type: String
    Description: CIDR block for public Subnet-2
    Default: 10.0.1.0/24
  PriSubnet1Cidr:
    Type: String
    Description: CIDR block for private Subnet-1
    Default: 10.0.2.0/24
  PriSubnet2Cidr:
    Type: String
    Description: CIDR block for private Subnet-2
    Default: 10.0.3.0/24
  Subnet1AZ:
    Type: String
    Description: Availability Zone for Subnet-1
    Default: us-east-1a
  Subnet2AZ:
    Type: String
    Description: Availability Zone for Subnet-2
    Default: us-east-1b
  PubRtName:
    Type: String
    Description: Name for public route table
    Default: PublicRouteTable
  ALBWebName:
    Type: String
    Description: Name for Application Load Balancer
    Default: MyALB
  ALBSecurityGroupWebName:
    Type: String
    Description: Name for ALB Security Group
    Default: MyALBSG
  TargetGroupWebName:
    Type: String
    Description: Name for Target Group
    Default: MyTG
  LaunchConfigurationName:
    Type: String
    Description: Name for Launch Configuration
    Default: MyLaunchConfig
  AutoScalingGroupName:
    Type: String
    Description: Name for Auto Scaling Group
    Default: MyASG
  ASGSecurityGroupWebName:
    Type: String
    Description: Name for ASG Security Group
    Default: MyASGSG
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for EC2 instances
    Default: ami-0a699202e5027c10d
  Environment:
    Type: String
    Description: Specify the environment. Becareful with the spelling
    AllowedValues: [dev, qa, prod]
    Default: dev
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Default: key
  DBSGName:
    Type: String
    Description: Name of the RDS database security group
    Default: mydb-sg
  DBSubnetGroupName:
    Type: String
    Description: Name of the RDS database subnet group
    Default: mydb-subnet-grp
  DBName:
    Type: String
    Description: Name of the RDS database
    Default: mydb
  InstanceClass:
    Type: String
    Description: Instance class for the RDS database
    Default: db.t3.micro
  DBUsername:
    Type: String
    Description: Username for the RDS database
    Default: mathesh
  DBPassword:
    Type: String
    Description: Password for the RDS database
    Default: password

Mappings: 
  InstanceType: 
    dev:
      instanceType: t2.micro
    qa:
      instanceType: t2.medium
    prod:
      instanceType: t2.large
  

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IgName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PubSubnet1Cidr
      AvailabilityZone: !Ref Subnet1AZ
      MapPublicIpOnLaunch: true 

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PubSubnet2Cidr
      AvailabilityZone: !Ref Subnet2AZ
      MapPublicIpOnLaunch: true 
 
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PriSubnet1Cidr
      AvailabilityZone: !Ref Subnet1AZ
      MapPublicIpOnLaunch: true 

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PriSubnet2Cidr
      AvailabilityZone: !Ref Subnet2AZ
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref PubRtName
  
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
       RouteTableId:
         Ref: PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ALBSecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref ALBSecurityGroupWebName
      GroupDescription: ALB Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: HTTP from Internet
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  ALBWeb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ALBWebName
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroupWeb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  TargetGroupWeb:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupWebName
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher: 
        HttpCode: "200"

  ALBListenerWeb:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALBWeb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupWeb

  ASGSecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref ASGSecurityGroupWebName
      GroupDescription: ASG Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: HTTP from ALB
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroupWeb
        - Description: SSH From Anywhere or Your-IP
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
  
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref ASGSecurityGroupWeb
            DeleteOnTermination: true
        ImageId: !Ref ImageId
        InstanceType: !FindInMap [InstanceType, !Ref Environment, instanceType]
        KeyName: !Ref KeyName
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Stack
                Value: Production
        UserData: !Base64 |
          #!/bin/bash
          # Use this for your user data (script from top to bottom)
          # install httpd (Linux 2 version)
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupName
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref TargetGroupWeb
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300

  DBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref DBSGName
      GroupDescription: DB Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !GetAtt ASGSecurityGroupWeb.GroupId
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref DBSGName

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags: 
        - Key: Name
          Value: !Ref DBSubnetGroupName

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 10
      DBName: !Ref DBName
      Engine: mysql
      EngineVersion: 5.7
      DBInstanceClass: !Ref InstanceClass
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBParameterGroupName: default.mysql5.7
      MultiAZ: true
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DeleteAutomatedBackups: true

Outputs:
  LoadBalancerDNS:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt ALBWeb.DNSName